#!/usr/bin/python

"""Libvirt port-forwarding hook.

Libvirt hook for setting up iptables port-forwarding rules when using NAT-ed
networking on a host with a single public IP address.

Original version by "Sascha Peilicke <saschpe@gmx.de>" adapted for my use-case.

"""

__author__ = "Martin Bo Kristensen Groenholdt <martin.groenholdt@gmail.com>"
__version__ = "0.1.2"

import os
import subprocess
import sys
import syslog
from importlib.machinery import SourceFileLoader

#Debug information in syslog?
DEBUG = True
#Path to the forwarding configuration file
CONFIG_PATH = os.getenv('CONFIG_PATH') or os.path.dirname(
    os.path.abspath(__file__))
CONFIG_FILENAME = os.getenv('CONFIG_FILENAME') or os.path.join(CONFIG_PATH,
                                                               "fwdconf")
IPTABLES_BINARY = os.getenv('IPTABLES_BINARY') or subprocess.check_output(
    ["which", "iptables"]).strip()


def logged_call(args):
    """
    Log command and stdout from external call.
    """
    if DEBUG:
        syslog.syslog(' '.join(args))
    ret = subprocess.Popen(args, stdout=subprocess.PIPE).communicate()[0]
    if ret != '':
        syslog.syslog(ret)

if __name__ == "__main__":
    vir_domain, action = sys.argv[1:3]
    syslog.syslog('Setting up forwarding for {}'.format(vir_domain))

    try:
        # Import config.py
        config = SourceFileLoader('config', CONFIG_FILENAME).load_module()

        if vir_domain in config.MACHINES.keys():
            machine = config.MACHINES[vir_domain]
        else:
            syslog.syslog('No forwarding configuration, terminating.')
            exit(0)

        if action in ["stopped", "reconnect"]:
            for network in config.NETWORKS:
                syslog.syslog('Adding forwarding rule for network ' +
                              '{}', format(network))
                logged_call(
                    [IPTABLES_BINARY, "-D", "FORWARD", "-m", "state", "-d",
                     network, "--state", "NEW,RELATED,ESTABLISHED", "-j", "ACCEPT"])

            syslog.syslog('Setting up machine "{}"'.format(name))
            syslog.syslog('Private IP and port ' +
                          '{}:{}'.format(machine.private_ip,
                                         machine.private_port))
            syslog.syslog('Public IP and port ' +
                          '{}:{}'.format(config.PUBLIC_IP,
                                         machine.public_port))
            logged_call(
                    [IPTABLES_BINARY, "-t", "nat", "-D", "PREROUTING", "-p",
                     "tcp", "-d", config.PUBLIC_IP, "--dport", machine.public_port, "-j",
                     "DNAT", "--to-destination",
                     "{0}:{1}".format(machine.private_ip, str(machine.private_port))])

        if action in ["start", "reconnect"]:
            for network in config.NETWORKS:
                syslog.syslog('Adding forwarding rule for network ' +
                              '{}', format(network))
                logged_call(
                    [IPTABLES_BINARY, "-I", "FORWARD", "-m", "state", "-d",
                     network, "--state", "NEW,RELATED,ESTABLISHED", "-j", "ACCEPT"])

            syslog.syslog('Setting up machine "{}"'.format(name))
            syslog.syslog('Private IP and port ' +
                          '{}:{}'.format(machine.private_ip,
                                         machine.private_port))
            syslog.syslog('Public IP and port ' +
                          '{}:{}'.format(config.PUBLIC_IP,
                                         machine.public_port))
            logged_call(
                    [IPTABLES_BINARY, "-t", "nat", "-I", "PREROUTING", "-p",
                     "tcp", "-d", config.PUBLIC_IP, "--dport", machine.public_port, "-j",
                     "DNAT", "--to-destination",
                     "{0}:{1}".format(machine.private_ip, str(machine.private_port))])
    except FileNotFoundError:
        syslog.syslog("No fwdconf found, terminating.")
        exit(0)
    except SyntaxError as exception:
        syslog.syslog('Syntax error in fwdconf configuration file.')
        syslog.syslog(str(exception.lineno) + ':' + str(exception.offset) +
                     ': ' + exception.text)
        exit(1)

